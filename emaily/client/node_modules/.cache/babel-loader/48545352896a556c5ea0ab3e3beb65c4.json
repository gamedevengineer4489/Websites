{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_USER, FETCH_SURVEYS, DELETE_SURVEY } from './types'; //import mongoose = require('mongoose');\n\nimport mongoose from 'mongoose'; // mongoose.connect('mongodb+srv://dbUser:hGr41oyajVaVbhpA@cluster0.yna6u.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', {useNewUrlParser: true, useUnifiedTopology: true});\n\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get('/api/current_user');\n  dispatch({\n    type: FETCH_USER,\n    payload: res.data\n  });\n};\nexport const fetchSurveys = () => async dispatch => {\n  const res = await axios.get('/api/surveys');\n  console.log(res.data);\n  dispatch({\n    type: FETCH_SURVEYS,\n    payload: res.data\n  });\n};\nexport const handleToken = token => async dispatch => {\n  const res = await axios.post('/api/stripe', token);\n  dispatch({\n    type: FETCH_USER,\n    payload: res.data\n  });\n};\nexport const submitSurvey = (values, history) => async dispatch => {\n  const res = await axios.post('/api/surveys', values);\n  dispatch({\n    type: FETCH_USER,\n    payload: res.data\n  });\n  history.push('/surveys');\n}; ///////////////////////////////////////////////////////\n// To edit a stream we first need to fetch the survey.\n\nexport const submitEdit = (values, history) => async dispatch => {\n  const res = await axios.get('/api/surveys');\n  console.log(values);\n  dispatch({\n    type: FETCH_USER,\n    payload: res.data\n  });\n  history.push('/surveys');\n};\nexport const deleteSurvey = (id, history) => async dispatch => {\n  const res = await axios.delete(`/api/surveys/:${id}`);\n  dispatch({\n    type: FETCH_SURVEYS,\n    payload: res.data\n  });\n  history.push('/surveys');\n};","map":{"version":3,"sources":["C:/Users/alexa/Documents/GitHub/Obs-streamer/first/client/src/actions/index.js"],"names":["axios","FETCH_USER","FETCH_SURVEYS","DELETE_SURVEY","mongoose","fetchUser","dispatch","res","get","type","payload","data","fetchSurveys","console","log","handleToken","token","post","submitSurvey","values","history","push","submitEdit","deleteSurvey","id","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,aAApC,QAAyD,SAAzD,C,CACA;;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC/C,QAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,mBAAV,CAAlB;AAEAF,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAER,UAAR;AAAoBS,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAAjC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMN,QAAN,IAAkB;AAClD,QAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,cAAV,CAAlB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYP,GAAG,CAACI,IAAhB;AACAL,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAApC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMI,WAAW,GAAGC,KAAK,IAAI,MAAMV,QAAN,IAAkB;AACpD,QAAMC,GAAG,GAAG,MAAMP,KAAK,CAACiB,IAAN,CAAW,aAAX,EAA0BD,KAA1B,CAAlB;AAEAV,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAER,UAAR;AAAoBS,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAAjC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMO,YAAY,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB,MAAMd,QAAN,IAAkB;AACjE,QAAMC,GAAG,GAAG,MAAMP,KAAK,CAACiB,IAAN,CAAW,cAAX,EAA2BE,MAA3B,CAAlB;AAGAb,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAER,UAAR;AAAoBS,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAAjC,GAAD,CAAR;AACAS,EAAAA,OAAO,CAACC,IAAR,CAAa,UAAb;AACD,CANM,C,CAQP;AAEA;;AAGA,OAAO,MAAMC,UAAU,GAAG,CAACH,MAAD,EAASC,OAAT,KAAsB,MAAOd,QAAP,IAAmB;AACjE,QAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAU,cAAV,CAAlB;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYK,MAAZ;AACAb,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAER,UAAR;AAAoBS,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAAjC,GAAD,CAAR;AACAS,EAAAA,OAAO,CAACC,IAAR,CAAa,UAAb;AACD,CALM;AAOP,OAAO,MAAME,YAAY,GAAI,CAACC,EAAD,EAAKJ,OAAL,KAAiB,MAAMd,QAAN,IAAkB;AAC9D,QAAMC,GAAG,GAAG,MAAMP,KAAK,CAACyB,MAAN,CAAc,iBAAgBD,EAAG,EAAjC,CAAlB;AACAlB,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEH,GAAG,CAACI;AAApC,GAAD,CAAR;AACAS,EAAAA,OAAO,CAACC,IAAR,CAAa,UAAb;AACD,CAJM","sourcesContent":["import axios from 'axios';\r\nimport { FETCH_USER, FETCH_SURVEYS, DELETE_SURVEY } from './types';\r\n//import mongoose = require('mongoose');\r\nimport mongoose from 'mongoose';\r\n\r\n// mongoose.connect('mongodb+srv://dbUser:hGr41oyajVaVbhpA@cluster0.yna6u.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', {useNewUrlParser: true, useUnifiedTopology: true});\r\n\r\n\r\nexport const fetchUser = () => async dispatch => {\r\n  const res = await axios.get('/api/current_user');\r\n\r\n  dispatch({ type: FETCH_USER, payload: res.data });\r\n};\r\n\r\nexport const fetchSurveys = () => async dispatch => {\r\n  const res = await axios.get('/api/surveys');\r\n  console.log(res.data);\r\n  dispatch({ type: FETCH_SURVEYS, payload: res.data })\r\n};\r\n\r\nexport const handleToken = token => async dispatch => {\r\n  const res = await axios.post('/api/stripe', token);\r\n\r\n  dispatch({ type: FETCH_USER, payload: res.data });\r\n};\r\n\r\nexport const submitSurvey = (values, history) => async dispatch => {\r\n  const res = await axios.post('/api/surveys', values);\r\n  \r\n  \r\n  dispatch({ type: FETCH_USER, payload: res.data });\r\n  history.push('/surveys')\r\n};\r\n\r\n///////////////////////////////////////////////////////\r\n\r\n// To edit a stream we first need to fetch the survey.\r\n\r\n\r\nexport const submitEdit = (values, history)  => async (dispatch) =>{\r\n  const res = await axios.get('/api/surveys');\r\n  console.log(values);\r\n  dispatch({ type: FETCH_USER, payload: res.data });\r\n  history.push('/surveys');\r\n};\r\n\r\nexport const deleteSurvey =  (id, history) => async dispatch => {\r\n  const res = await axios.delete(`/api/surveys/:${id}`);\r\n  dispatch({ type: FETCH_SURVEYS, payload: res.data });\r\n  history.push('/surveys');\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}