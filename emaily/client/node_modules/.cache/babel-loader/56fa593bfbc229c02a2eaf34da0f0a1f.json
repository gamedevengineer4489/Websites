{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_USER, FETCH_SURVEYS } from './types';\nimport mongoose from 'mongoose';\nexport const fetchUser = () => async dispatch => {\n  const res = await axios.get('/api/current_user');\n  dispatch({\n    type: FETCH_USER,\n    payload: res.data\n  });\n};\nexport const handleToken = token => async dispatch => {\n  const res = await axios.post('/api/stripe', token);\n  dispatch({\n    type: FETCH_USER,\n    payload: res.data\n  });\n};\nexport const submitSurvey = (values, history) => async dispatch => {\n  const res = await axios.post('/api/surveys', values);\n  dispatch({\n    type: FETCH_USER,\n    payload: res.data\n  });\n  history.push('/surveys');\n}; // To edit a stream we first need to fetch the survey.\n\nexport const fetchSurvey = async id => {\n  const res = await axios.get('/api/surveys');\n  const survey = res.data.filter(response => response._id === id); //const result = await axios.post(`/api/surveys/${id}`);\n\n  console.log(survey);\n  return survey;\n};\nexport const submitEdit = async (values, history) => {\n  console.log(values);\n  mongoose.connect('mongodb+srv://dbUser:hGr41oyajVaVbhpA@cluster0.yna6u.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', {\n    useNewUrlParser: true\n  });\n  const Survey = mongoose.model('surveys'); //Survey.findOneAndUpdate({_id: id}, {title: values.title, subject: values.subject, body: values.body, recipients: values.recipients }, { new: true} );\n\n  history.push('/surveys');\n};\nexport const deleteSurvey = async (id, history) => {\n  //const res = await Survey.findOneAndDelete({_id: id}, { new: true});\n  // history.push('/surveys');\n  mongoose.connect('mongodb+srv://dbUser:hGr41oyajVaVbhpA@cluster0.yna6u.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', {\n    useNewUrlParser: true\n  });\n  const Survey = mongoose.model('surveys');\n  console.log(Survey.findOne({\n    _id: id\n  }));\n  console.log(id);\n};\nexport const fetchSurveys = () => async dispatch => {\n  const res = await axios.get('/api/surveys');\n  console.log(res.data);\n  dispatch({\n    type: FETCH_SURVEYS,\n    payload: res.data\n  });\n};","map":{"version":3,"sources":["C:/Users/alexa/Documents/GitHub/Obs-streamer/first/client/src/actions/index.js"],"names":["axios","FETCH_USER","FETCH_SURVEYS","mongoose","fetchUser","dispatch","res","get","type","payload","data","handleToken","token","post","submitSurvey","values","history","push","fetchSurvey","id","survey","filter","response","_id","console","log","submitEdit","connect","useNewUrlParser","Survey","model","deleteSurvey","findOne","fetchSurveys"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { FETCH_USER, FETCH_SURVEYS } from './types';\r\nimport mongoose from 'mongoose';\r\n\r\n\r\n\r\nexport const fetchUser = () => async dispatch => {\r\n  const res = await axios.get('/api/current_user');\r\n\r\n  dispatch({ type: FETCH_USER, payload: res.data });\r\n};\r\n\r\nexport const handleToken = token => async dispatch => {\r\n  const res = await axios.post('/api/stripe', token);\r\n\r\n  dispatch({ type: FETCH_USER, payload: res.data });\r\n};\r\n\r\nexport const submitSurvey = (values, history) => async dispatch => {\r\n  const res = await axios.post('/api/surveys', values);\r\n  \r\n  \r\n  dispatch({ type: FETCH_USER, payload: res.data });\r\n  history.push('/surveys')\r\n};\r\n\r\n// To edit a stream we first need to fetch the survey.\r\nexport const fetchSurvey = async (id) => {\r\n  const res = await axios.get('/api/surveys');\r\n  const survey = res.data.filter(response => response._id === id);\r\n  //const result = await axios.post(`/api/surveys/${id}`);\r\n  console.log(survey);\r\n  return survey;\r\n}\r\n\r\nexport const submitEdit = async (values, history)  => {\r\n  console.log(values);\r\n  mongoose.connect('mongodb+srv://dbUser:hGr41oyajVaVbhpA@cluster0.yna6u.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', { useNewUrlParser: true });\r\n  const Survey = mongoose.model('surveys');\r\n  //Survey.findOneAndUpdate({_id: id}, {title: values.title, subject: values.subject, body: values.body, recipients: values.recipients }, { new: true} );\r\n  history.push('/surveys')\r\n};\r\n\r\nexport const deleteSurvey = async (id, history) => {\r\n  //const res = await Survey.findOneAndDelete({_id: id}, { new: true});\r\n  // history.push('/surveys');\r\n  mongoose.connect('mongodb+srv://dbUser:hGr41oyajVaVbhpA@cluster0.yna6u.mongodb.net/myFirstDatabase?retryWrites=true&w=majority', { useNewUrlParser: true });\r\n  const Survey = mongoose.model('surveys');\r\n  console.log(Survey.findOne({_id: id}));\r\n  console.log(id);\r\n}\r\n\r\n\r\nexport const fetchSurveys = () => async dispatch => {\r\n  const res = await axios.get('/api/surveys');\r\n  console.log(res.data);\r\n  dispatch({ type: FETCH_SURVEYS, payload: res.data })\r\n};"]},"metadata":{},"sourceType":"module"}